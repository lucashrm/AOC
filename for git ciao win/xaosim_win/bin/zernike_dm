#!/usr/bin/env python3

import pygame, sys
from pygame.locals import *
import numpy as np
import pdb
import socket
import os

# =================================================
# =================================================
chn = 4

# =================================================
# =================================================
if 'scexao' in socket.gethostname():
    from xaosim.scexao_shmlib import shm
else:
    from xaosim.shmlib  import shm

from xaosim.zernike import mkzer1
from xaosim.zernike import zer_mode_bank_2D


hmsg = """
-------------------------------------------------------
           _____               _ _        
          |__  /___ _ __ _ __ (_) | _____ 
            / // _ \ '__| '_ \| | |/ / _ \
           / /|  __/ |  | | | | |   <  __/
          /____\___|_|  |_| |_|_|_|\_\___|

                                 
               !!! THE VIDEO GAME !!!

-------------------------------------------------------
This application is a work in progress - an exercise in
intuitive instrument control interface, taking advantage
of the Pygame library.

It is just made available as it is, for test purposes.

Currently, only the *MANUAL* TAB is operational. Other
TABS are intended to replace the current APF-WFS in the
future.

In the absence of joystick, use the arrow keys of your 
keyboard to move around, and you'll pretty soon figure
out what to do.

Frantz.
-------------------------------------------------------
"""

# ------------------------------------------------------------------
#                       global variables
# ------------------------------------------------------------------
z0, z1 = 4, 13              # Zernike indices
dz = z1 - z0 + 1

wmodes = ["MANUAL", "AUTO", "RECAL"]
umode = 0
wmode = wmodes[umode]
zreso = 0.001 # resolution for the amplitude of the modes
amin, amax = -0.5, 0.5

z_vals = np.zeros(10)      # zernike coefficients

sync = True
# -----------------------

if 'scexao' in socket.gethostname():
    dmc  = shm('/tmp/dm00disp%02d.im.shm' % (chn,)) # DM channel (perturbation)
else: # simulation rig
    dmc  = shm('/dev/shm/dmdisp%d.im.shm' % (chn,)) # DM channel (perturbation)

    
dms = dmc.mtdata['size'][1] # dm size

# -----------------------
#   set up the window
# -----------------------
adelay = 100 # action delay (keys and joystick actions)
pygame.init()
pygame.key.set_repeat(adelay, 1)

FPS = 30                        # frames per second setting
fpsClock = pygame.time.Clock()  # start the pygame clock!
XW, YW = 500, 800               # window dimensions
BW = 5                          # border width

screen = pygame.display.set_mode((XW, YW), 0, 32)
pygame.display.set_caption('Zernike')

mask = np.ones((dms, dms),    dtype=np.float32) # to remove non-existing actuators

# =========================================================
def select_ZER_basis(dms):
    ''' ---------------------------------------------------
    --------------------------------------------------- '''
    i0, i1 = 4, 14
    nzer = i1-i0

    if dms < 50: # ---- for the ALPAO DM ----
        bank_dm_modes = np.zeros((nzer, dms, dms)).astype('float32')
        for i in range(nzer):
            bank_dm_modes[i] = mkzer1(i+i0, dms, dms//2, False)

        mask[:3,0] = 0.0
        mask[0,:3] = 0.0
        mask[1, 1] = 0.0
        mask[-3:,0] = 0.0
        mask[-1,:3] = 0.0
        mask[-2,1]  = 0.0
        mask[0,-3:] = 0.0
        mask[1,-2:] = 0.0
        mask[2,-1]  = 0.0
        mask[-1,-3:] = 0.0
        mask[-2,-2:] = 0.0
        mask[-3,-1]  = 0.0

    else: # ------- for the SCExAO DM -------
        #dmpz = 46 # pupil size in dm actuators
        dmpz = 50 # pupil size in dm actuators
        temp = zer_mode_bank_2D(dmpz, i0, i1)
        bank_dm_modes = np.zeros((nzer, dms, dms)).astype('float32')
        for i in range(nzer):
            #bank_dm_modes[i, 0:dmpz, 1:dmpz+1] = temp[i]
            bank_dm_modes[i, 0:dmpz, 0:dmpz] = temp[i]

    return(bank_dm_modes)
# ===============================================================


# ===============================================================
def combine_modes():
    global mode_basis
    a = np.zeros((dms, dms), dtype='float')
    if sync:
        for i in range(z0, z1+1):
            a += z_vals[i-z0] * mode_basis[i-z0]
        dmc.set_data((a*mask).astype('float32'))

# ===============================================================
def draw_cursor(surf, xc, yc, hh, ww, vmin, vmax, vcur, active):
    x0, y0 = xc - ww//2, yc - hh//2
    x1 = x0 + ww * (vcur-vmin) / (vmax-vmin) - ww//20
    y1 = yc-hh

    if (active):
        BTCOL = GOLD
    else:
        BTCOL = BLUE
    pygame.draw.rect(surf, BTCOL, (x0,y0,ww, hh), 0)
    pygame.draw.rect(surf, FGCOL, (x0,y0,ww, hh), 1)

    pygame.draw.rect(surf, BTCOL, (x1,y1,hh, 2*hh), 0)
    pygame.draw.rect(surf, FGCOL, (x1,y1,hh, 2*hh), 1)

    hdl = font1.render("%3d nm" % (1000 * vcur,),  True, FGCOL)

    zn = hdl.get_rect()
    zn.center = (xc, yc)
    surf.blit(hdl, zn)

# ------------------------------------------------------------------
#              !!! now we are in business !!!!
# ------------------------------------------------------------------

mode_basis = select_ZER_basis(dms)

WHITE = (255, 255, 255)
GREEN = (  0, 153,  76) 
BLUE  = (  0,   0, 153)
RED   = (255,   0,   0)
BLK   = (  0,   0,   0)
DDGRY = ( 50,  50,  50)
DGRAY = ( 80,  80,  80)
GOLD  = (255, 215,   0)
ORANG = (255, 128,   0)

FGCOL = WHITE  # foreground color (text)
BGCOL = BLK    # background color
BTCOL = BLUE   # *button* color

background = pygame.Surface(screen.get_size())
background = background.convert()
background.fill(BLK)


# ----------------------------
#          labels
# ----------------------------
font1 = pygame.font.SysFont("default",   28)
font2 = pygame.font.SysFont("monospace", 16)

hdline1 = font1.render("MANUAL", True, FGCOL)#, DDGRY)
hdline2 = font1.render("AUTO",   True, FGCOL)
hdline3 = font1.render("RECAL",  True, FGCOL)

zone1 = hdline1.get_rect()
zone2 = hdline2.get_rect()
zone3 = hdline3.get_rect()

ZH = zone1.h                    # text height
FW, FH = XW-2*BW, YW-2*BW-2*ZH  # frame dimensions

zone1.center = (BW+FW//6, BW+ZH)
zone2.center = (BW+FW//2, BW+ZH)
zone3.center = (BW+5*FW//6, BW+ZH)

pygame.draw.rect(screen, DDGRY, (BW,BW,FW//3, 2*ZH), 0)
pygame.draw.rect(screen, DDGRY, (BW+FW//3,BW,FW//3, 2*ZH), 0)
pygame.draw.rect(screen, DDGRY, (BW+2*FW//3,BW,FW//3, 2*ZH), 0)

screen.blit(hdline1, zone1)
screen.blit(hdline2, zone2)
screen.blit(hdline3, zone3)

# -------------------------------
#        rectangles
# -------------------------------

blabels = ['SYNC', 'RESET', 'MEMO', 'SAVE', 'LOAD', 'RANDOM']
bxs = [2*BW+FW//6, 2*BW+FW//2, 2*BW+5*FW//6, 2*BW+FW//6, 2*BW+FW//2, 2*BW+5*FW//6]
by0 = YW - 4*ZH
bys = [by0, by0, by0, by0 + 2*ZH, by0 + 2*ZH, by0 + 2*ZH]

for i in range(6):
    exec('b_lbl%d = font1.render(blabels[i], True, FGCOL)' % (i,))
    exec('b_rec%d = b_lbl%d.get_rect()' % (i,i,))
    exec('b_rec%d.center = (bxs[i], bys[i]+0.75*ZH)' % (i,))
    exec('screen.blit(b_lbl%d, b_rec%d), ' % (i,i,))

xws, yws = 100, 100
imin, imax = 0, 0
surf_live_img   = pygame.surface.Surface((xws, yws))
rect1           = surf_live_img.get_rect()
rect1.center    = (5+xws//2, 5+yws//2)


zlabel = ['focus', 'astig1', 'astig2', 'coma1', 'coma2', 
          'trfl1', 'trfl2', 'spheric', 'quad1', 'quad2']

mode_lock = [False, False, False, False, False, 
             False, False, False, False, False]

mode_actv = 0 # index to keep track of what mode is actuated

# =======================================================
# =======================================================
while True: # the main game loop
    clicked = False

    # =====================================
    for event in pygame.event.get():

        if event.type == QUIT:
            pygame.quit()

            # close shared memory access
            # --------------------------
            print("The program has ended normally.")
            sys.exit()
        elif event.type == KEYDOWN:
            mmods = pygame.key.get_mods()

            if event.key == K_ESCAPE:
                pygame.quit()
                # close shared memory access
                # --------------------------
                print("The program has ended normally.")
                sys.exit()

            # ============= ARROWS ==================
            if event.key == K_UP:
                if (umode == 0):
                    mode_actv = (mode_actv - 1) % dz

            if event.key == K_DOWN:
                if (umode == 0):
                    mode_actv = (mode_actv + 1) % dz

            if event.key == K_RIGHT:
                if (umode == 0):
                    mult = 1.0
                    if (mmods & KMOD_LSHIFT):
                        mult = 10.0
                    temp = z_vals[mode_actv] + mult * zreso
                    if (temp < amax):
                        z_vals[mode_actv] = temp
                    combine_modes()

            if event.key == K_LEFT:
                if (umode == 0):
                    mult = 1.0
                    if (mmods & KMOD_LSHIFT):
                        mult = 10.0
                    temp = z_vals[mode_actv] - mult * zreso
                    if (temp > amin):
                        z_vals[mode_actv] = temp
                    combine_modes()
            # ========================================

            if event.key == K_h:
                print(hmsg)

            # ------ TAB used to switch modes ------
            if event.key == K_TAB:
                umode = (umode + 1) % 3
                wmode = wmodes[umode]


        # ---------------------------------------------
        #               MOUSE actions
        # ---------------------------------------------
        elif event.type == MOUSEMOTION:
            mx, my = event.pos

        elif event.type == MOUSEBUTTONDOWN:
            mx, my = event.pos
            clicked = True
            
            # --------- CLICK used to switch modes ------
            for i in range(3):
                exec('mytest = zone%d.collidepoint(mx, my)' % (i+1,))
                if (mytest):
                    umode = i
                    wmode = wmodes[umode]

            # ---------- manual mode use case ----------
            if (umode == 0):
                for i in range(6):
                    exec('mytest = b_rec%d.collidepoint(mx, my)' % (i,))
                    if (mytest):
                        if (i == 0):   # SYNC
                            sync = True - sync
                            combine_modes()

                        elif (i == 1): # RESET
                            z_vals = np.zeros(10)
                            combine_modes()
                        elif (i == 2):
                            print("NOT IMPLEMENTED YET") # MEMO
                        elif (i == 3): # SAVE
                            print("NOT IMPLEMENTED YET")
                        elif (i == 4): # LOAD
                            print("NOT IMPLEMENTED YET")
                        else:          # EMPTY
                            z_vals = 0.03 * np.random.randn(10)
                            combine_modes()

    # ---------------------------------------------
    pygame.draw.rect(screen, DDGRY, (BW,BW+2*ZH,FW, FH), 0)
    pygame.draw.rect(screen, FGCOL, (BW,BW+2*ZH,FW, FH), 2)

    pygame.draw.rect(screen, DGRAY, (BW,BW,FW, 2*ZH), 0)
    pygame.draw.rect(screen, FGCOL, (BW,BW,FW, 2*ZH), 1)


    # ============== ACTIVATE THE MODE FUNCTIONALITIES =================
    if wmode == "AUTO":
        # ---------------------------------------------------------
        pygame.draw.rect(screen, DDGRY, (BW+FW/3,BW,FW/3, 2*ZH), 0)
        pygame.draw.rect(screen, FGCOL, (BW+FW/3,BW,FW/3, 2*ZH), 2)
        # ---------------------------------------------------------

    elif wmode == "RECAL":
        # ---------------------------------------------------------
        pygame.draw.rect(screen, DDGRY, (BW+2*FW/3,BW, FW/3, 2*ZH), 0)
        pygame.draw.rect(screen, FGCOL, (BW+2*FW/3,BW, FW/3, 2*ZH), 2)
        # ---------------------------------------------------------

    else:
        # ---------------------------------------------------------
        pygame.draw.rect(screen, DDGRY, (BW,BW,FW/3, 2*ZH), 0)
        pygame.draw.rect(screen, FGCOL, (BW,BW,FW/3, 2*ZH), 2)

        for i in range(z0, z1+1):
            yy = 200 + 50 * (i - z0)
            hdl = font1.render(zlabel[i-z0],  True, FGCOL)

            zone = hdl.get_rect()
            zone.center = (BW+FW/6, yy)
            screen.blit(hdl, zone)

            active = False
            if mode_actv == i-z0:
                active = True
            draw_cursor(screen, BW+FW/2, yy, 22, 200, 
                        amin, amax, z_vals[i-z0], active)

        if sync:
            pygame.draw.rect(screen, GREEN, 
                             (bxs[0]-FW/6, bys[0], FW/3-2*BW, 1.5*ZH), 0)
        else:
            pygame.draw.rect(screen, RED, 
                             (bxs[0]-FW/6, bys[0], FW/3-2*BW, 1.5*ZH), 0)

        pygame.draw.rect(screen, FGCOL, 
                         (bxs[0]-FW/6, bys[0], FW/3-2*BW, 1.5*ZH), 2)
        screen.blit(b_lbl0, b_rec0)
        
        for i in range(1,6):
            pygame.draw.rect(screen, ORANG, 
                             (bxs[i]-FW/6, bys[i], FW/3-2*BW, 1.5*ZH), 0)
            pygame.draw.rect(screen, FGCOL, 
                             (bxs[i]-FW/6, bys[i], FW/3-2*BW, 1.5*ZH), 2)
            exec('screen.blit(b_lbl%d, b_rec%d), ' % (i,i,))

        # ---------------------------------------------------------
            
    # ============= FINISH DRAWING THE WINDOW + TABS ==============
    screen.blit(hdline1, zone1)
    screen.blit(hdline2, zone2)
    screen.blit(hdline3, zone3)


    pygame.display.flip()

    fpsClock.tick(FPS)

pygame.quit()
sys.exit()
